;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Input1: Ausgewählte Messungszeitpunkt
; Output: Identifizierte Messung + Ergebnis der Messungsnalayse
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sequenz imc_logging "view_measurement_from_marker started"
; measpoint_date from ViewMeasurementPoint
wenn varexist?("measpoint_date")
	_varname = measpoint_date
	
	sequenz ClearSelectedPlot "TimeWaveForm"
	sequenz ClearSelectedPlot "HistPlotT"
	sequenz ClearSelectedPlot "BoxPlot"
	sequenz ClearSelectedPlot "FFT3D"
	sequenz ClearSelectedPlot "FFT_averaged"
	

	_t = tteil(_varname,1,2)
	_m = tteil(_varname,4,2)
	_j = tteil(_varname,7,4)
	_hh = tteil(_varname,12,2)
	_mm = tteil(_varname,15,2)
	_ss = tteil(_varname,15,2)
	
	_Sek=TzuEW(_ss,"e")
	_Min=TzuEW(_mm,"e")
	_Stun=TzuEW(_hh,"e")
	_Tag=TzuEW(_t,"e")
	_Monat=TzuEW(_m,"e")
	_Jahr=TzuEW(_j,"e")
	Messdatum_zahl0=ZeitBinde(_Tag,_Monat,_Jahr,_Stun,_Min,_Sek)
	
	_file_search = "*.dat"; -> alle files suchen die unter dem Marker liegen, der file am nächsten vor dem Marker wird genommen.
	PnSetText("MeasDate",_varname)

	_pathname = TWFFile;
	;	TWFFile = CompletedFolder
	_FileListID=FsFileListNew(_PathName, _file_search,0,1,2)
	
	ListEventFiles = txArrayCreate(0)
	wenn _filelistid >= 1 
		_FileCountMax=FsFileListGetCount(_FileListID)
		_file_i = 1
		solange _file_i <= _FileCountMax
			file_i_name =FsFileListGetName(_filelistid,_file_i)
			ListEventFiles[_file_i] = file_i_name
			_file_i = _file_i +1
		ende
	ende
	fsfilelistclose(_FileListID)
			
	measpoint_date_ = Messdatum_zahl0
	
	;ListEventFiles
	file_i = 1
	file_len =  txArrayGetSize(ListEventFiles)
	file_idx = rampe(1,1,file_len+1)
	dt_vec = leer
	solange file_i <=file_len 
		file_i_name_long = ListEventFiles[file_i]
		file_i_name = fsSplitPath(file_i_name_long,2)
		file_i_len = tlang(file_i_name)
		file_i_dt = tteil(file_i_name,file_i_len-14,15)
		year = tzuew(tteil(file_i_dt, 1,4),"a")
		month =  tzuew(tteil(file_i_dt, 5,2),"a")
		day =  tzuew(tteil(file_i_dt, 7,2),"a")
		hh =  tzuew(tteil(file_i_dt, 10,2) ,"a")
		mn =  tzuew(tteil(file_i_dt, 12,2),"a")
		ss =  tzuew(tteil(file_i_dt, 14,2),"a")
		file_i_dt_val = ZeitBinde(day, month, year, hh, mn, ss)
		diff_dt_val = measpoint_date_-file_i_dt_val
		dt_vec = binde(dt_vec, diff_dt_val)
		file_i = file_i + 1
	ende
	ListEventFiles[file_len+1] = ""
	dt_vec = binde(dt_vec, 0)
	dt_vec_xy = xyvon(file_idx,dt_vec)
	dt_vec_sort = sort(dt_vec_xy,5)

	posi_0  = posi(dt_vec_sort.y, 0)
	file_id = dt_vec_sort.x
	if posi_0 = 1
		file_idx = posi_0+1
		file_id2 = file_id[file_idx]
		file_2 = ListEventFiles[file_id2]
		file_ist = file_2
	ende
	if posi_0 = lang?(dt_vec_sort.y)
		file_idx = posi_0-1
		file_id1 = file_id[file_idx]
		file_1 = ListEventFiles[file_id1]
		file_ist = file_1
	ende
	if posi_0 > 1 and posi_0 < lang?(dt_vec_sort.y)
		file_idx = posi_0 - 1
		file_id1 = file_id[file_idx]
		file_1 = ListEventFiles[file_id1]
		file_idx = posi_0 +1
		file_id2 = file_id[file_idx]
		file_2 = ListEventFiles[file_id2]
		dist = dt_vec_sort.y
		d1 = abs(dist[posi_0+1])
		d2 = abs(dist[posi_0 -1])
		if abs(dist[posi_0+1]) < abs(dist[posi_0 -1])
			file_ist = file_2
		else
			file_ist = file_1
		ende
	ende

	_Filename =  fssplitpath(file_ist,4)
	
	if fsfileexists(file_ist)
		currentsignal = "None"
		MeasData = GrNeu()
		chname = PnGetText("Channel")
		currentfile = _FileName
		_filelen = tleng(_filename)
		if _filelen > 19
			_Filename_short = "*"+tteil(_filename,tleng(_filename)-19,20)
		else
			_Filename_short = "*"+_filename
		end
		PnSetText("MeasFile",_Filename_short)
		MeasFileIdx = PnFindItem("VibrationAnalysis.MeasFile",currentfile)
		if MeasFileIdx > 0
			PnSelectItem("VibrationAnalysis.MeasFile", MeasFileIdx)
		END
		MeasFileIdx = PnFindItem("ElectricalAnalysis.MeasFile",currentfile)
		if MeasFileIdx > 0
			PnSelectItem("ElectricalAnalysis.MeasFile", MeasFileIdx)
		END
		
		;PnSetText("VibrationAnalysis.MeasFile",_Filename_short)
		;PnSetText("ElectricalAnalysis.MeasFile",_Filename_short)
		_fileid = FileOpenDSF(file_ist,100)
		wenn _fileid > 0; and _filesize > 1000
			_index = FileObjNum?(_fileid)
			wenn _index <> 0
				_count = 1
				_sig_idx = FileObjFind(_fileid,Chname,1)
				solange _count <= _index		
					;if _sig_idx > 0
					_parvalue = FileObjRead(_fileid,_count)
					_signame = FileObjName?(_fileid,_count)
					{<_signame>} = _parvalue
					MeasData:{<_signame>} = {<_signame>}
					wenn tverg(_signame,Chname) = 0
						signal1 = {<_signame>}
						currentsignal = _signame
					ende
					wenn txwo(_signame,"U1") = 1 or txwo(_signame,"U2") = 1 or txwo(_signame,"U3") = 1 or txwo(_signame,"I1") = 1 or txwo(_signame,"I2") = 1 or txwo(_signame,"I1") = 1
						chname_red_list = txsplit(chname,"_")
						chname_red = chname_red_list[1]
						wenn txwo(_signame,chname_red) = 1
							currentsignal = _signame
							signal1 = {<_signame>}
							;tdata = 10; sec
							;break
						ende
					ende
					_count = _count + 1
				ende
			ende
			_err = fileclose(_fileid)
		sonst
			_err = FileErrCode?()
			zeigen _err
		ende
		
		wenn tverg(currentsignal,"None") <> 0
			ChannelName = currentsignal
			;	PnSetText("Channel",_Pname)
			CwSelectMode("title")
			ret = CwIsWindow("TimeWaveForm")
			wenn ret <> 0
				CwSelectWindow("TimeWaveForm")
			ende
			CwSelectByIndex("y-axis",1)
			CwDeleteElement("axis")
		
			sequenz plot_2d_trend signal1 0 "TimeWaveForm"
			;sequenz plot_2d_trend {<_signame>} 0 "TimeWaveForm"
			;cw_verz = "C:\BDA\DataExploration\"
			CwLoadCCV("TimeWaveForm",cw_verz + "twf.ccv")
		
			sequenz BoxPlot  signal1
			;sequenz BoxPlot {<_signame>}
		
			signal = signal1
			entf Parameter_Sig_mean
			entf Ax_mean
			entf Ax_kask
			entf data_hist
		
			;		; build and load boxplot, histogram, fft_averaged and fft3d
			Load_fft_file = PnGetValue("Load_fft_file")
			if Load_fft_file = 0
				sequenz BoxPlot_FFT_Analysis signal1
			else
				;S107_fft_mag_20200326_131000
				_filedate = tteil(_Filename_short,tleng(_Filename_short)-18,tleng(_Filename_short)-6)
				_FftFileSoll = ChannelName + "*fft_mag*" + _filedate + ".csv"
				_fftfilesoll_verz = AssetFolder + "\Output\FFT\"
				_fftfilesoll_list = FsGetFileNames(_fftfilesoll_verz,_FftFileSoll,0,1,0)
				_erg = TxArrayGetSize(_fftfilesoll_list)
				if _erg > 0
					importsvorlage = "#ImportAscii1.dll|ascii_python_3dfft"
					_par_unit_ = "Hz"

					t0 = ZeitSystem?()
					Eventidx = leer;
					Eventdate = leer;
					_x = leer
					_groupart = 1;
					_FftFileSoll = _fftfilesoll_list[1]
					_fileid = FileOpenFAS(_FftFileSoll, importsvorlage, 0); ascii_statusfile
					wenn _fileid > 0
						_anzPar = FileObjNum?(_fileid)
						_fft_idx = 1
						SOLANGE _fft_idx <= _anzPar  
							;zeigen _fft_idx
							_typ = FileObjType?(_fileid,_fft_idx)
							wenn _typ = 1
								_Parname = FileObjName?(_fileid,_fft_idx)
								{<_Parname>} = FileObjRead(_fileid,_fft_idx)
								seteinheit ({<_Parname>},_par_unit_,0)
				
								fftfile_name = FsSplitPath(_FftFileSoll,2)
								parname_trend = fftfile_name
				
								wenn _groupart = 1; Segment
									wenn _fft_idx = 1				
										{<parname_trend>} = GrNeu()
										{<parname_trend>}:{<_Parname>}  = {<_Parname>} 
									sonst
										{<parname_trend>}:{<_Parname>}  = {<_Parname>} 
									ende
								else
									wenn _fft_idx > 1
										EventAppend({<parname_trend>},{<_Parname>},0)
									ende				
									wenn _fft_idx = 1				
										{<parname_trend>} = EventNew({<_Parname>},0)
									ende
									wenn _fft_idx > 1
										EventAppend({<parname_trend>},{<_Parname>},0)
									ende					
									_eventnr = EventNum?({<parname_trend>})
									_Messdatum = _Parname
									_Sek_ = TTeil(_Messdatum,18,2)
									_Sek=TzuEW(_Sek_,"e")
									_Min_ = TTeil(_Messdatum,15,2)
									_Min=TzuEW(_Min_,"e")
									_Stun_ = TTeil(_Messdatum,12,2)
									_Stun=TzuEW(_Stun_,"e")
									_Tag_ = TTeil(_Messdatum,9,2)
									_Tag=TzuEW(_Tag_,"e")
									_Monat_ = TTeil(_Messdatum,6,2)
									_Monat=TzuEW(_Monat_,"e")
									_Jahr_ = TTeil(_Messdatum,1,4)
									_Jahr=TzuEW(_Jahr_,"e")
									_Messdatum_zahl=ZeitBinde(_Tag,_Monat,_Jahr,_Stun,_Min,_Sek)
										
									Ttrig = _Messdatum_zahl
										
									EventProp({<parname_trend>},_eventnr,0,Ttrig)
								ende
				
								;			ActEventDate = EventProp?({<parname_trend>},_fft_idx,0)
								;			Eventdate = binde(Eventdate,ganz(ActEventDate))
								;			_x = binde(_x,_fft_idx)
	
								entf _Parname
								entf {<_Parname>}
							ende
							zeigen _fft_idx
							_fft_idx = _fft_idx + 1
						ende
						Ax_kask = {<parname_trend>}
						wenn _groupart = 1 
							_EwSegLang = lang?(Ax_kask:[1])
							_group = GrBinde(Ax_kask,0)
							SetSegLang(_group,_EwSegLang)
							Ax_kask = _group
						ende
						Ax_mean = MatrixSumLines(Ax_kask,0)/(_fft_idx-1)
	
						fileclose(_fileid)	
					end
					if varexist?("_fft_idx")
						cwselectmode("variable")
						cwselectwindow(_fft_idx)
						CwAction("win.close")
					ende
				end
			end
			
			;		
			; averaged fft
			CwSelectMode("title")
			ret = CwIsWindow("FFT_averaged")
			wenn ret <> 0
				CwSelectWindow("FFT_averaged")
			ende
			CwSelectByIndex("y-axis",1)
			CwDeleteElement("axis")
			CwNewChannel("append new axis",Ax_mean)
			CwSelectByChannel("line",Ax_mean)
			CwLineSet("symbol",0)
			CwLoadCCV("FFT_averaged",cw_verz + "Ax_mean.ccv")
		
			;3d fft
			CwSelectMode("title")
			ret = CwIsWindow("FFT3D")
			wenn ret <> 0
				CwSelectWindow("FFT3D")
			ende
			CwSelectByIndex("y-axis",1)
			CwDeleteElement("axis")
			
			;cw_verz = "C:\BDA\ExpertAnalysis\"
			index = PnGetValue("CascadePlotaxis")
			wenn index = 0
				sequenz plot_3d_trend Ax_kask 1 "FFT3D"
				CwLoadCCV("FFT3D",cw_verz + "Ax_kask_normal.ccv")
			else
				Ax_kask_t = MatrixTranspose(Ax_kask)
				sequenz plot_3d_trend Ax_kask_t 1 "FFT3D"
				CwLoadCCV("FFT3D",cw_verz + "Ax_kask_transposed.ccv")
			ende
		
			;sequenz ShowParameterTableStatus
			
			sequenz ReadConfigChannel
			
			sequenz ReadConfigChannel_esa
		
		sonst
			BoxNachricht("Info","Measurement Signal not present in the measurement file","?1")
		ende
	sonst
		BoxNachricht("Info","Measurement file does not exist","?1")
	ende
ende

